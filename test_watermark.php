<?php
header('Content-Type: text/html; charset=utf-8');
?>
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ - –ú–∞—Å—Ç–µ—Ä –í–æ–¥—è–Ω—ã—Ö –ó–Ω–∞–∫–æ–≤</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 20px; }
        .test-section { margin: 20px 0; padding: 15px; border: 1px solid #ddd; border-radius: 5px; }
        .success { background-color: #d4edda; border-color: #c3e6cb; color: #155724; }
        .error { background-color: #f8d7da; border-color: #f5c6cb; color: #721c24; }
        .warning { background-color: #fff3cd; border-color: #ffeaa7; color: #856404; }
        .info { background-color: #d1ecf1; border-color: #bee5eb; color: #0c5460; }
        pre { background: #f8f9fa; padding: 10px; border-radius: 3px; overflow-x: auto; }
    </style>
</head>
<body>
    <h1>üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è "–ú–∞—Å—Ç–µ—Ä –í–æ–¥—è–Ω—ã—Ö –ó–Ω–∞–∫–æ–≤"</h1>
    
    <?php
    $tests = [];
    
    // –¢–µ—Å—Ç 1: –í–µ—Ä—Å–∏—è PHP
    $tests['php_version'] = [
        'name' => '–í–µ—Ä—Å–∏—è PHP',
        'status' => version_compare(PHP_VERSION, '7.4.0', '>=') ? 'success' : 'error',
        'message' => 'PHP ' . PHP_VERSION . ' - ' . (version_compare(PHP_VERSION, '7.4.0', '>=') ? '‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è' : '‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è PHP 7.4+')
    ];
    
    // –¢–µ—Å—Ç 2: –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ Imagick
    $tests['imagick'] = [
        'name' => '–†–∞—Å—à–∏—Ä–µ–Ω–∏–µ Imagick',
        'status' => class_exists('Imagick') ? 'success' : 'error',
        'message' => class_exists('Imagick') ? '‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ' : '‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ'
    ];
    
    // –¢–µ—Å—Ç 3: –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ ZipArchive
    $tests['zip'] = [
        'name' => '–†–∞—Å—à–∏—Ä–µ–Ω–∏–µ ZipArchive',
        'status' => class_exists('ZipArchive') ? 'success' : 'error',
        'message' => class_exists('ZipArchive') ? '‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ' : '‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ'
    ];
    
    // –¢–µ—Å—Ç 4: –ü–∞–ø–∫–∞ temp
    $temp_dir = __DIR__ . '/temp';
    $tests['temp_dir'] = [
        'name' => '–ü–∞–ø–∫–∞ temp',
        'status' => (is_dir($temp_dir) && is_writable($temp_dir)) ? 'success' : 'error',
        'message' => (is_dir($temp_dir) && is_writable($temp_dir)) ? '‚úÖ –°—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏' : '‚ùå –ù–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏'
    ];
    
    // –¢–µ—Å—Ç 5: –ü–∞–ø–∫–∞ fonts
    $fonts_dir = __DIR__ . '/fonts';
    $tests['fonts_dir'] = [
        'name' => '–ü–∞–ø–∫–∞ fonts',
        'status' => is_dir($fonts_dir) ? 'success' : 'error',
        'message' => is_dir($fonts_dir) ? '‚úÖ –°—É—â–µ—Å—Ç–≤—É–µ—Ç' : '‚ùå –ù–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç'
    ];
    
    // –¢–µ—Å—Ç 6: –®—Ä–∏—Ñ—Ç—ã –≤ –ø–∞–ø–∫–µ fonts
    if (is_dir($fonts_dir)) {
        $font_files = glob($fonts_dir . '/*.{ttf,otf}', GLOB_BRACE);
        $tests['font_files'] = [
            'name' => '–§–∞–π–ª—ã —à—Ä–∏—Ñ—Ç–æ–≤',
            'status' => count($font_files) > 0 ? 'success' : 'warning',
            'message' => count($font_files) > 0 ? '‚úÖ –ù–∞–π–¥–µ–Ω–æ ' . count($font_files) . ' —à—Ä–∏—Ñ—Ç–æ–≤' : '‚ö†Ô∏è –®—Ä–∏—Ñ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã'
        ];
    }
    
    // –¢–µ—Å—Ç 7: –ü—Ä–∞–≤–∞ –Ω–∞ –∑–∞–ø–∏—Å—å –≤ temp
    if (is_dir($temp_dir)) {
        $test_file = $temp_dir . '/test_write.tmp';
        $write_test = @file_put_contents($test_file, 'test');
        if ($write_test !== false) {
            unlink($test_file);
            $tests['write_permission'] = [
                'name' => '–ü—Ä–∞–≤–∞ –Ω–∞ –∑–∞–ø–∏—Å—å –≤ temp',
                'status' => 'success',
                'message' => '‚úÖ –ó–∞–ø–∏—Å—å —Ä–∞–±–æ—Ç–∞–µ—Ç'
            ];
        } else {
            $tests['write_permission'] = [
                'name' => '–ü—Ä–∞–≤–∞ –Ω–∞ –∑–∞–ø–∏—Å—å –≤ temp',
                'status' => 'error',
                'message' => '‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –∑–∞–ø–∏—Å—å'
            ];
        }
    }
    
    // –¢–µ—Å—Ç 8: –ü—Ä–æ–≤–µ—Ä–∫–∞ ImageMagick
    if (class_exists('Imagick')) {
        try {
            $imagick = new Imagick();
            $formats = $imagick->queryFormats();
            $tests['imagick_formats'] = [
                'name' => '–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã ImageMagick',
                'status' => 'info',
                'message' => '‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è ' . count($formats) . ' —Ñ–æ—Ä–º–∞—Ç–æ–≤'
            ];
        } catch (Exception $e) {
            $tests['imagick_formats'] = [
                'name' => '–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã ImageMagick',
                'status' => 'error',
                'message' => '‚ùå –û—à–∏–±–∫–∞: ' . $e->getMessage()
            ];
        }
    }
    
    // –¢–µ—Å—Ç 9: –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    $required_files = ['index.html', 'process.php', 'fonts.css.php', 'get_fonts.php'];
    $missing_files = [];
    foreach ($required_files as $file) {
        if (!file_exists(__DIR__ . '/' . $file)) {
            $missing_files[] = $file;
        }
    }
    $tests['required_files'] = [
        'name' => '–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∞–π–ª—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è',
        'status' => empty($missing_files) ? 'success' : 'error',
        'message' => empty($missing_files) ? '‚úÖ –í—Å–µ —Ñ–∞–π–ª—ã –Ω–∞ –º–µ—Å—Ç–µ' : '‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç: ' . implode(', ', $missing_files)
    ];
    
    // –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    foreach ($tests as $test) {
        echo '<div class="test-section ' . $test['status'] . '">';
        echo '<h3>' . $test['name'] . '</h3>';
        echo '<p>' . $test['message'] . '</p>';
        echo '</div>';
    }
    
    // –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞
    $success_count = 0;
    $total_count = count($tests);
    foreach ($tests as $test) {
        if ($test['status'] === 'success' || $test['status'] === 'info') $success_count++;
    }
    
    echo '<div class="test-section ' . ($success_count === $total_count ? 'success' : 'warning') . '">';
    echo '<h2>üìä –û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç</h2>';
    echo '<p>–ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: ' . $success_count . ' –∏–∑ ' . $total_count . '</p>';
    if ($success_count === $total_count) {
        echo '<p>üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã! –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ –∫ —Ä–∞–±–æ—Ç–µ.</p>';
    } else {
        echo '<p>‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.</p>';
    }
    echo '</div>';
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    echo '<div class="test-section info">';
    echo '<h2>‚ÑπÔ∏è –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h2>';
    echo '<pre>';
    echo "PHP –≤–µ—Ä—Å–∏—è: " . PHP_VERSION . "\n";
    echo "–û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞: " . PHP_OS . "\n";
    echo "–í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–æ–Ω–∞: " . date_default_timezone_get() . "\n";
    echo "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –∑–∞–≥—Ä—É–∂–∞–µ–º–æ–≥–æ —Ñ–∞–π–ª–∞: " . ini_get('upload_max_filesize') . "\n";
    echo "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: " . ini_get('max_execution_time') . " —Å–µ–∫\n";
    echo "–õ–∏–º–∏—Ç –ø–∞–º—è—Ç–∏: " . ini_get('memory_limit') . "\n";
    echo '</pre>';
    echo '</div>';
    ?>
    
    <div class="test-section info">
        <h2>üîó –°—Å—ã–ª–∫–∏</h2>
        <p><a href="index.html">–û—Ç–∫—Ä—ã—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ</a></p>
        <p><a href="clean_temp.php">–û—á–∏—Å—Ç–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã</a></p>
    </div>
</body>
</html>