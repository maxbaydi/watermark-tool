<?php
header('Content-Type: text/html; charset=utf-8');
?>
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>–¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ - –ú–∞—Å—Ç–µ—Ä –í–æ–¥—è–Ω—ã—Ö –ó–Ω–∞–∫–æ–≤</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 20px; }
        .test-section { margin: 20px 0; padding: 15px; border: 1px solid #ddd; border-radius: 5px; }
        .success { background-color: #d4edda; border-color: #c3e6cb; color: #155724; }
        .error { background-color: #f8d7da; border-color: #f5c6cb; color: #721c24; }
        .info { background-color: #d1ecf1; border-color: #bee5eb; color: #0c5460; }
        .test-image { max-width: 200px; border: 1px solid #ddd; margin: 10px; }
        .result-image { max-width: 300px; border: 2px solid #28a745; margin: 10px; }
    </style>
</head>
<body>
    <h1>üß™ –¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è</h1>
    
    <div class="test-section info">
        <h2>–¢–µ—Å—Ç 1: –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è</h2>
        <?php
        try {
            // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            $test_image = new Imagick();
            $test_image->newImage(400, 300, 'white');
            $test_image->setImageFormat('png');
            
            // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            $draw = new ImagickDraw();
            $draw->setFontSize(24);
            $draw->setFillColor('black');
            $draw->setGravity(Imagick::GRAVITY_CENTER);
            $test_image->annotateImage($draw, 0, 0, 0, '–¢–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ');
            
            $test_path = __DIR__ . '/temp/test_image.png';
            $test_image->writeImage($test_path);
            $test_image->clear();
            
            echo '<p>‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ</p>';
            echo '<img src="temp/test_image.png" class="test-image" alt="–¢–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ">';
            
        } catch (Exception $e) {
            echo '<p>‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: ' . $e->getMessage() . '</p>';
        }
        ?>
    </div>
    
    <div class="test-section info">
        <h2>–¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–æ–¥—è–Ω—ã—Ö –∑–Ω–∞–∫–æ–≤</h2>
        <?php
        if (file_exists(__DIR__ . '/temp/test_image.png')) {
            try {
                // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                $image = new Imagick(__DIR__ . '/temp/test_image.png');
                
                // –°–æ–∑–¥–∞–µ–º –≤–æ–¥—è–Ω–æ–π –∑–Ω–∞–∫
                $draw = new ImagickDraw();
                $draw->setFontSize(36);
                $draw->setFillColor('red');
                $draw->setFillAlpha(0.7);
                $draw->setGravity(Imagick::GRAVITY_CENTER);
                
                // –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–¥—è–Ω–æ–π –∑–Ω–∞–∫
                $image->annotateImage($draw, 0, 0, 0, '–í–û–î–Ø–ù–û–ô –ó–ù–ê–ö');
                
                $result_path = __DIR__ . '/temp/test_result.png';
                $image->writeImage($result_path);
                $image->clear();
                
                echo '<p>‚úÖ –í–æ–¥—è–Ω–æ–π –∑–Ω–∞–∫ –¥–æ–±–∞–≤–ª–µ–Ω</p>';
                echo '<img src="temp/test_result.png" class="result-image" alt="–†–µ–∑—É–ª—å—Ç–∞—Ç —Å –≤–æ–¥—è–Ω—ã–º –∑–Ω–∞–∫–æ–º">';
                
            } catch (Exception $e) {
                echo '<p>‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–æ–¥—è–Ω–æ–≥–æ –∑–Ω–∞–∫–∞: ' . $e->getMessage() . '</p>';
            }
        } else {
            echo '<p>‚ùå –¢–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ</p>';
        }
        ?>
    </div>
    
    <div class="test-section info">
        <h2>–¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤</h2>
        <?php
        $formats = ['jpg', 'png', 'gif', 'webp'];
        $supported_formats = [];
        
        foreach ($formats as $format) {
            try {
                $test_image = new Imagick();
                $test_image->newImage(100, 100, 'white');
                $test_image->setImageFormat($format);
                
                $test_path = __DIR__ . '/temp/test.' . $format;
                $test_image->writeImage($test_path);
                $test_image->clear();
                
                if (file_exists($test_path)) {
                    $supported_formats[] = $format;
                    unlink($test_path); // –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
                }
            } catch (Exception $e) {
                // –§–æ—Ä–º–∞—Ç –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è
            }
        }
        
        echo '<p>‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: ' . implode(', ', $supported_formats) . '</p>';
        ?>
    </div>
    
    <div class="test-section info">
        <h2>–¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ —à—Ä–∏—Ñ—Ç–æ–≤</h2>
        <?php
        $fonts_dir = __DIR__ . '/fonts';
        if (is_dir($fonts_dir)) {
            $font_files = glob($fonts_dir . '/*.{ttf,otf}', GLOB_BRACE);
            $working_fonts = [];
            
            foreach (array_slice($font_files, 0, 3) as $font_file) { // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3 —à—Ä–∏—Ñ—Ç–∞
                try {
                    $test_image = new Imagick();
                    $test_image->newImage(300, 100, 'white');
                    
                    $draw = new ImagickDraw();
                    $draw->setFont($font_file);
                    $draw->setFontSize(24);
                    $draw->setFillColor('black');
                    $draw->setGravity(Imagick::GRAVITY_CENTER);
                    
                    $test_image->annotateImage($draw, 0, 0, 0, '–¢–µ—Å—Ç —à—Ä–∏—Ñ—Ç–∞');
                    $test_image->clear();
                    
                    $font_name = basename($font_file);
                    $working_fonts[] = $font_name;
                    
                } catch (Exception $e) {
                    // –®—Ä–∏—Ñ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
                }
            }
            
            echo '<p>‚úÖ –†–∞–±–æ—Ç–∞—é—â–∏—Ö —à—Ä–∏—Ñ—Ç–æ–≤: ' . count($working_fonts) . ' –∏–∑ ' . count($font_files) . '</p>';
            if (!empty($working_fonts)) {
                echo '<p>–ü—Ä–∏–º–µ—Ä—ã: ' . implode(', ', array_slice($working_fonts, 0, 3)) . '</p>';
            }
        } else {
            echo '<p>‚ùå –ü–∞–ø–∫–∞ —à—Ä–∏—Ñ—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞</p>';
        }
        ?>
    </div>
    
    <div class="test-section success">
        <h2>üéâ –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è</h2>
        <p>–í—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!</p>
        <p><a href="index.html">–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é</a></p>
        <p><a href="test_watermark.php">–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ–ª–Ω—É—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É</a></p>
    </div>
    
    <script>
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤ —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥
        setTimeout(() => {
            fetch('clean_temp.php', { method: 'POST' })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        console.log('–¢–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã –æ—á–∏—â–µ–Ω—ã');
                    }
                })
                .catch(error => console.error('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏:', error));
        }, 30000);
    </script>
</body>
</html>